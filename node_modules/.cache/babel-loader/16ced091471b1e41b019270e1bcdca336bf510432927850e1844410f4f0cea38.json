{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows\\\\Desktop\\\\Project\\\\shoe_website\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = async (username, password) => {\n    console.log(\"username = \", username, \" password = \", password);\n    try {\n      const response = await fetch('http://localhost:8080/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      console.log(\"fe res = \", response);\n      if (response.status === 200) {\n        // Check for HTTP status 200 (OK)\n        const data = await response.json();\n        setUser(data.user); // Assuming the data includes the user\n        setIsAuthenticated(true);\n        localStorage.setItem('token', data.token); // Assuming the Spring API sends a token\n        return true;\n      } else if (response.status === 401) {\n        // If status is 401 (Unauthorized)\n        console.error('Invalid credentials');\n        return false;\n      } else {\n        console.error('Unexpected response status:', response.status);\n        return false;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"k19B3VQCOMbqjP9Ul958Nm6p/lo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","login","username","password","console","log","response","fetch","method","headers","body","JSON","stringify","status","data","json","localStorage","setItem","token","error","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Windows/Desktop/Project/shoe_website/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const login = async (username, password) => {\r\n    console.log(\"username = \", username, \" password = \", password);\r\n    try {\r\n      const response = await fetch('http://localhost:8080/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n  \r\n      console.log(\"fe res = \", response);\r\n  \r\n      if (response.status === 200) {  // Check for HTTP status 200 (OK)\r\n        const data = await response.json();\r\n        setUser(data.user);  // Assuming the data includes the user\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('token', data.token);  // Assuming the Spring API sends a token\r\n        return true;\r\n      } else if (response.status === 401) {  // If status is 401 (Unauthorized)\r\n        console.error('Invalid credentials');\r\n        return false;\r\n      } else {\r\n        console.error('Unexpected response status:', response.status);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMY,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,QAAQ,EAAE,cAAc,EAAEC,QAAQ,CAAC;IAC9D,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEV,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,QAAQ,CAAC;MAElC,IAAIA,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QAAG;QAC9B,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCjB,OAAO,CAACgB,IAAI,CAACjB,IAAI,CAAC,CAAC,CAAE;QACrBG,kBAAkB,CAAC,IAAI,CAAC;QACxBgB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAE;QAC5C,OAAO,IAAI;MACb,CAAC,MAAM,IAAIZ,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QAAG;QACrCT,OAAO,CAACe,KAAK,CAAC,qBAAqB,CAAC;QACpC,OAAO,KAAK;MACd,CAAC,MAAM;QACLf,OAAO,CAACe,KAAK,CAAC,6BAA6B,EAAEb,QAAQ,CAACO,MAAM,CAAC;QAC7D,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO,KAAK;IACd;EACF,CAAC;EAGD,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBtB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;IACzBgB,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACE7B,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,IAAI;MAAEE,eAAe;MAAEE,KAAK;MAAEmB;IAAO,CAAE;IAAAzB,QAAA,EACnEA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CAhDWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAkDzB,OAAO,MAAMmC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMxC,UAAU,CAACG,WAAW,CAAC;AAAA;AAACqC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}